"""Basic JSONB CRUD operations tests."""

import pytest
from conftest import ComplexJSON, SimpleJSON
from repositories.jsonb_repositories import ComplexJSONRepository, SimpleJSONRepository


@pytest.mark.asyncio
class TestJSONBBasic:
    """Test basic JSONB operations."""

    async def test_create_simple_jsonb(self, jsonb_tables):
        """Test creating a record with simple JSONB data."""
        repo = SimpleJSONRepository(jsonb_tables)

        # Create record (id will be auto-generated by SERIAL)
        data = SimpleJSON(data={"key": "value", "number": 42})
        created = await repo.create(data)

        assert created.id > 0
        assert created.data == {"key": "value", "number": 42}

    async def test_create_complex_jsonb(self, jsonb_tables):
        """Test creating a record with multiple JSONB fields."""
        repo = ComplexJSONRepository(jsonb_tables)

        # Create record
        data = ComplexJSON(
            name="test",
            metadata={"version": 1, "author": "test"},
            tags=["python", "jsonb"],
            settings={"enabled": True, "limit": 100},
        )
        created = await repo.create(data)

        assert created.id > 0
        assert created.metadata == {"version": 1, "author": "test"}
        assert created.tags == ["python", "jsonb"]
        assert created.settings == {"enabled": True, "limit": 100}

    async def test_get_by_id(self, jsonb_tables):
        """Test retrieving JSONB data by ID."""
        repo = SimpleJSONRepository(jsonb_tables)

        # Create and retrieve
        data = SimpleJSON(data={"nested": {"value": "test"}})
        created = await repo.create(data)
        retrieved = await repo.get_by_id(created.id)

        assert retrieved is not None
        assert retrieved.data == {"nested": {"value": "test"}}

    async def test_update_jsonb(self, jsonb_tables):
        """Test updating JSONB fields."""
        repo = ComplexJSONRepository(jsonb_tables)

        # Create record
        data = ComplexJSON(name="original", metadata={"version": 1}, tags=["old"])
        created = await repo.create(data)

        # Update
        updated = await repo.update(
            created.id, {"metadata": {"version": 2, "updated": True}, "tags": ["new", "updated"]}
        )

        assert updated.metadata == {"version": 2, "updated": True}
        assert updated.tags == ["new", "updated"]

    async def test_delete_jsonb(self, jsonb_tables):
        """Test deleting records with JSONB data."""
        repo = SimpleJSONRepository(jsonb_tables)

        # Create and delete
        data = SimpleJSON(data={"temp": "data"})
        created = await repo.create(data)

        await repo.delete(created.id)

        # Verify deletion - get_by_id raises RecordNotFoundError
        from psycopg_toolkit.exceptions import RecordNotFoundError

        with pytest.raises(RecordNotFoundError):
            await repo.get_by_id(created.id)

    async def test_get_all(self, jsonb_tables):
        """Test retrieving all records with JSONB data."""
        repo = SimpleJSONRepository(jsonb_tables)

        # Create multiple records
        for i in range(3):
            await repo.create(SimpleJSON(data={"index": i}))

        # Get all
        all_records = await repo.get_all()
        assert len(all_records) >= 3

        # Verify JSONB data
        indices = [r.data["index"] for r in all_records if "index" in r.data]
        assert 0 in indices
        assert 1 in indices
        assert 2 in indices

    async def test_create_bulk(self, jsonb_tables):
        """Test bulk creation with JSONB data."""
        repo = ComplexJSONRepository(jsonb_tables)

        # Create multiple records
        records = [
            ComplexJSON(name=f"bulk_{i}", metadata={"index": i, "bulk": True}, tags=[f"tag{i}"]) for i in range(5)
        ]

        created = await repo.create_bulk(records)
        assert len(created) == 5

        # Verify JSONB data
        for i, record in enumerate(created):
            assert record.metadata["index"] == i
            assert record.metadata["bulk"] is True

    async def test_null_jsonb_fields(self, jsonb_tables):
        """Test handling of null JSONB fields."""
        repo = ComplexJSONRepository(jsonb_tables)

        # Create with null optional fields
        data = ComplexJSON(name="null_test", metadata={"required": True}, tags=None, settings=None)
        created = await repo.create(data)

        assert created.metadata == {"required": True}
        assert created.tags is None
        assert created.settings is None

        # Retrieve and verify
        retrieved = await repo.get_by_id(created.id)
        assert retrieved.tags is None
        assert retrieved.settings is None

    async def test_empty_jsonb_collections(self, jsonb_tables):
        """Test empty arrays and objects in JSONB."""
        repo = ComplexJSONRepository(jsonb_tables)

        # Create with empty collections
        data = ComplexJSON(name="empty_test", metadata={}, tags=[], settings={})
        created = await repo.create(data)

        assert created.metadata == {}
        assert created.tags == []
        assert created.settings == {}

    async def test_special_characters_in_jsonb(self, jsonb_tables):
        """Test special characters in JSONB data."""
        repo = SimpleJSONRepository(jsonb_tables)

        # Create with special characters
        special_data = {
            "unicode": "cafÃ© â˜• ä¸­æ–‡",
            "quotes": 'He said "Hello"',
            "backslash": "path\\to\\file",
            "newline": "line1\nline2",
            "emoji": "ðŸš€ ðŸŽ‰",
        }

        data = SimpleJSON(data=special_data)
        created = await repo.create(data)

        # Retrieve and verify
        retrieved = await repo.get_by_id(created.id)
        assert retrieved.data == special_data
