name: Release to PyPI

on:
  release:
    types: [published]

env:
  PYTHON_VERSION: '3.11'

jobs:
  validate-release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract-version.outputs.version }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Validate tag format
      run: |
        if [[ ! "${{ github.ref_name }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "❌ Invalid tag format: ${{ github.ref_name }}"
          echo "Expected format: v[0-9]+.[0-9]+.[0-9]+ (e.g., v1.2.3)"
          exit 1
        fi
        echo "✅ Tag format is valid: ${{ github.ref_name }}"

    - name: Extract version
      id: extract-version
      run: |
        VERSION="${{ github.ref_name }}"
        VERSION="${VERSION#v}"  # Remove 'v' prefix
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "📦 Extracted version: $VERSION"

    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install uv
      uses: astral-sh/setup-uv@v6

    - name: Verify version consistency
      run: |
        PYPROJECT_VERSION=$(uv run python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
        TAG_VERSION="${{ steps.extract-version.outputs.version }}"
        
        if [[ "$PYPROJECT_VERSION" != "$TAG_VERSION" ]]; then
          echo "❌ Version mismatch!"
          echo "   pyproject.toml version: $PYPROJECT_VERSION"
          echo "   Git tag version: $TAG_VERSION"
          echo ""
          echo "Please update pyproject.toml version to match the git tag"
          exit 1
        fi
        
        echo "✅ Version consistency verified: $TAG_VERSION"

  test:
    runs-on: ubuntu-latest
    needs: validate-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install uv
      uses: astral-sh/setup-uv@v6

    - name: Install dependencies
      run: |
        uv sync --all-groups

    - name: Run tests
      run: |
        uv run pytest -v --tb=short -m "not performance"


  build-and-publish:
    runs-on: ubuntu-latest
    needs: [validate-release, test]
    environment: pypi
    permissions:
      id-token: write  # For trusted publishing
      contents: read
      attestations: write  # For artifact attestation
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install uv
      uses: astral-sh/setup-uv@v6

    - name: Build package
      run: |
        echo "🔨 Building package for version ${{ needs.validate-release.outputs.version }}"
        uv build
        echo "📋 Built artifacts:"
        ls -la dist/

    - name: Generate artifact attestation
      uses: actions/attest-build-provenance@v3
      with:
        subject-path: 'dist/*'

    - name: Publish to PyPI
      env:
        PYPI_API_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        echo "🚀 Publishing to PyPI..."
        uv publish --token $PYPI_API_TOKEN
        echo "✅ Successfully published psycopg-toolkit v${{ needs.validate-release.outputs.version }} to PyPI"

    - name: Create deployment summary
      run: |
        echo "## 🎉 Release Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Package**: psycopg-toolkit" >> $GITHUB_STEP_SUMMARY
        echo "- **Version**: ${{ needs.validate-release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Git Tag**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **PyPI URL**: https://pypi.org/project/psycopg-toolkit/${{ needs.validate-release.outputs.version }}/" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Installation" >> $GITHUB_STEP_SUMMARY
        echo '```bash' >> $GITHUB_STEP_SUMMARY
        echo "uv add psycopg-toolkit==${{ needs.validate-release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY